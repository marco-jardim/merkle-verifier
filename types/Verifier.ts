/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface VerifierInterface extends utils.Interface {
  functions: {
    "getMyRoot()": FunctionFragment;
    "getRoot(address)": FunctionFragment;
    "setRoot(bytes32)": FunctionFragment;
    "verify(bytes32,bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getMyRoot" | "getRoot" | "setRoot" | "verify"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getMyRoot", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRoot", values: [string]): string;
  encodeFunctionData(functionFragment: "setRoot", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "getMyRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export interface Verifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMyRoot(overrides?: CallOverrides): Promise<[string]>;

    getRoot(_address: string, overrides?: CallOverrides): Promise<[string]>;

    setRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      _leaf: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getMyRoot(overrides?: CallOverrides): Promise<string>;

  getRoot(_address: string, overrides?: CallOverrides): Promise<string>;

  setRoot(
    _root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    _leaf: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getMyRoot(overrides?: CallOverrides): Promise<string>;

    getRoot(_address: string, overrides?: CallOverrides): Promise<string>;

    setRoot(_root: BytesLike, overrides?: CallOverrides): Promise<void>;

    verify(
      _leaf: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getMyRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getRoot(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    setRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      _leaf: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMyRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoot(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      _leaf: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
