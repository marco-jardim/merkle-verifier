{
  "address": "0x15F7EF03af6cc050f256d2D250d1b7e37A2D0431",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getMyRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x10c7e46fce4e9a03df3499ef6fb0d6b1bae18d908414448aab5c7a9aa6b36cd8",
  "receipt": {
    "to": null,
    "from": "0x9f5Ea5Af0368E1d6F685F07978c8A22b2Df7c78D",
    "contractAddress": "0x15F7EF03af6cc050f256d2D250d1b7e37A2D0431",
    "transactionIndex": 22,
    "gasUsed": "216356",
    "logsBloom": "0x
    "blockHash": "0x7d3bcfdaf0f6503b98ddc67c18bd131515df4fe8c0482698c6e5db3fdc37944f",
    "transactionHash": "0x10c7e46fce4e9a03df3499ef6fb0d6b1bae18d908414448aab5c7a9aa6b36cd8",
    "logs": [],
    "blockNumber": 10775561,
    "cumulativeGasUsed": "10489378",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "603662079f6cc1e1aa8785e12a7ac39a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getMyRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\ncontract Verifier {\\r\\n\\r\\n    mapping (address => bytes32) roots;\\r\\n\\r\\n    constructor() {\\r\\n        \\r\\n    }\\r\\n\\r\\n    function verify(bytes32 _leaf, bytes32[] calldata _merkleProof) public view returns (bool) {\\r\\n        return MerkleProof.verify(_merkleProof, roots[msg.sender], _leaf);\\r\\n    }\\r\\n\\r\\n    function setRoot(bytes32 _root) public {\\r\\n        roots[msg.sender] = _root;\\r\\n    }\\r\\n\\r\\n    function getRoot(address _address) public view returns (bytes32) {\\r\\n        return roots[_address];\\r\\n    }\\r\\n\\r\\n    function getMyRoot() public view returns (bytes32) {\\r\\n        return getRoot(msg.sender);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x32923f79ab7767967215de176ca18bfe0d13fdc240107d0edb64a280713d4c47\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506102f4806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063079cf76e146100515780631e1a81a21461009a5780636df4d241146100af578063dab5f340146100d2575b600080fd5b61008761005f3660046101d3565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6040519081526020015b60405180910390f35b33600090815260208190526040902054610087565b6100c26100bd366004610210565b6100f4565b6040519015158152602001610091565b6100f26100e036600461028f565b33600090815260208190526040902055565b005b600061014183838080602002602001604051908101604052809392919081815260200183836020028082843760009201829052503381526020819052604090205492508891506101499050565b949350505050565b600082610156858461015f565b14949350505050565b600081815b84518110156101cb576000858281518110610181576101816102a8565b602002602001015190508083116101a757600083815260208290526040902092506101b8565b600081815260208490526040902092505b50806101c3816102be565b915050610164565b509392505050565b6000602082840312156101e557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461020957600080fd5b9392505050565b60008060006040848603121561022557600080fd5b83359250602084013567ffffffffffffffff8082111561024457600080fd5b818601915086601f83011261025857600080fd5b81358181111561026757600080fd5b8760208260051b850101111561027c57600080fd5b6020830194508093505050509250925092565b6000602082840312156102a157600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156102e057634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063079cf76e146100515780631e1a81a21461009a5780636df4d241146100af578063dab5f340146100d2575b600080fd5b61008761005f3660046101d3565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6040519081526020015b60405180910390f35b33600090815260208190526040902054610087565b6100c26100bd366004610210565b6100f4565b6040519015158152602001610091565b6100f26100e036600461028f565b33600090815260208190526040902055565b005b600061014183838080602002602001604051908101604052809392919081815260200183836020028082843760009201829052503381526020819052604090205492508891506101499050565b949350505050565b600082610156858461015f565b14949350505050565b600081815b84518110156101cb576000858281518110610181576101816102a8565b602002602001015190508083116101a757600083815260208290526040902092506101b8565b600081815260208490526040902092505b50806101c3816102be565b915050610164565b509392505050565b6000602082840312156101e557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461020957600080fd5b9392505050565b60008060006040848603121561022557600080fd5b83359250602084013567ffffffffffffffff8082111561024457600080fd5b818601915086601f83011261025857600080fd5b81358181111561026757600080fd5b8760208260051b850101111561027c57600080fd5b6020830194508093505050509250925092565b6000602082840312156102a157600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156102e057634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 99,
        "contract": "contracts/Verifier.sol:Verifier",
        "label": "roots",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}